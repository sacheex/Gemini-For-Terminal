#!/usr/bin/python3

import google.generativeai as genai
import os
import argparse

# Parse command line arguments
def arg_parse():
    """
    Parses command line arguments to extract the prompt.

    Returns:
        str: The prompt extracted from command line arguments.
    """
    parser = argparse.ArgumentParser(description='Description of your program')

    # Add positional arguments
    parser.add_argument('words', nargs='+', type=str, help='The words to print')
    parser.add_argument('-c', '--chat', type=str, help='Chat conversations')

    # Parse the command-line arguments
    args = parser.parse_args()

    # Join the words into a single phrase
    phrase = ' '.join(args.words)

    return phrase

# Format text for display
def to_display(text):
    """
    Formats the generated text for display.

    Args:
        text (str): The generated text to be formatted.

    Returns:
        str: The formatted text ready for display.
    """
    text = text.replace('**', '')
    text = text.replace('*', '    â€¢')

    return text
    

def main():
    """
    Main function to execute the program.
    """
    prompt = arg_parse()

    # Fetch API key from environment variable
    GOOGLE_API_KEY = os.getenv('API_KEY')

    # Configure the generative AI library with the API key
    genai.configure(api_key=GOOGLE_API_KEY)

    # Initialize the generative model
    model = genai.GenerativeModel('gemini-1.5-pro-latest')

    # Generate content based on the prompt
    response = model.generate_content(
        prompt,
        generation_config = genai.types.GenerationConfig(
            candidate_count = 1,
            stop_sequences=['.'],
            max_output_tokens = 250,
            temperature = 0.5
        )
    )

    text = to_display(response.text)

    print("\n", text)

if __name__ == "__main__":
    main()

